1-pnorm(z) > 0.05
?pt
x = mean(c(19,14,23,20,15,19,21,16,18,18,16,21))
n = 12
ss = sd(c(19,14,23,20,15,19,21,16,18,18,16,21))
mu0 = 14
t = (x - mu0)/(ss/sqrt(n))
alpha = 0.05
zstar = qt(alpha,n-1)
1-pt(t,n-1)
alpha = 0.05
zstar = qt(alpha,df = n-1)
1-pt(t,df = n-1)
1-pnorm(1.4)
2*(1-pnorm(1.4))
pnorm(1.4)
1-pnorm(1.4)
pnorm(-2.25)
pt(-2.25, df = 9)
mu0 = 325.16
n = 75
x = 312.23
ss = 76.42
z = (x-mu0)/(sqrt(ss)/n)
z = (x-mu0)/(ss/sqrt(n))
z
pvalue = 2*pt(z, df = n-1)
mu0 = 324.16
z = (x-mu0)/(ss/sqrt(n))
mu0 = 324.16
n = 75
x = 312.34
ss = 76.42
z = (x-mu0)/(ss/sqrt(n))
mu0 = 325.16
n = 75
x = 312.34
ss = 76.42
z = (x-mu0)/(ss/sqrt(n))
pvalue = 2*pt(z, df = n-1)
alpha = 0.01
pvalue > alpha
pvalue < alpha
#z-test
mu0 = 200
sigma = 9
n = 10
x = 204.6
alpha = 0.05
z = (x-mu0)/(sigma/sqrt(n))
pvalue = 2*pnorm(z) #-- pvalue for Ha: mu != mu0
pvalue < alpha
pvalue = pnorm(z) #-- pvalue for Ha: mu < mu0
pvalue < alpha
pvalue = 1-pnorm(z) #-- pvalue for Ha: mu > mu0
pvalue < alpha
#-- pvalue for Ha: mu > mu0
pvalue = 1-pnorm(z)
pvalue < alpha
if(!pvalue < alpha){print("fail")}
#------------------------ t-test
mu0 = 325.16
n = 75
x = 312.34
ss = 76.42
alpha = 0.01
z = (x-mu0)/(ss/sqrt(n))
#-- pvalue for Ha: mu != mu0
pvalue = 2*pt(z, df = n-1)
pvalue < alpha
if(!pvalue < alpha){print("fail to reject Null hp")}else{print("Reject Null hp")}
n_samp_success <- 575
n_samp_obs <- 1000
n_pop_success <- 50
n_pop_obs <- 100
alpha = 0.05
p_sample = (n_samp_success/n_samp_obs)
p_pop = (n_pop_success/n_pop_obs)
z = (p_sample-p_pop)/sqrt((p_samp*(1-p_samp))/n_pop_obs)
n_samp_success <- 575
n_samp_obs <- 1000
n_pop_success <- 50
n_pop_obs <- 100
alpha = 0.05
p_sample = (n_samp_success/n_samp_obs)
p_pop = (n_pop_success/n_pop_obs)
z = (p_sample-p_pop)/sqrt((p_sample*(1-p_sample))/n_samp_obs)
n_samp_success <- 575
n_samp_obs <- 1000
n_pop_success <- 50
n_pop_obs <- 100
alpha = 0.05
p_sample = (n_samp_success/n_samp_obs)
p_pop = (n_pop_success/n_pop_obs)
z = (p_sample-p_pop)/sqrt((p_sample*(1-p_sample))/n_samp_obs)
n_samp_success <- 575
n_samp_obs <- 1000
n_pop_success <- 50
n_pop_obs <- 100
alpha = 0.05
p_sample = (n_samp_success/n_samp_obs)
p_pop = (n_pop_success/n_pop_obs)
z = (p_sample-p_pop)/sqrt((p_pop*(1-p_pop))/n_samp_obs)
pvalue = 1-pnorm(z)
if(!pvalue < alpha){print("fail to reject Null hp")}else{print("Reject Null hp")}
n_samp_success <- 14
n_samp_obs <- 56
n_pop_success <- 30
n_pop_obs <- 100
alpha = 0.05
p_sample = (n_samp_success/n_samp_obs)
p_pop = (n_pop_success/n_pop_obs)
z = (p_sample-p_pop)/sqrt((p_pop*(1-p_pop))/n_samp_obs)
#-- pvalue for Ha: mu != mu0
pvalue = 2*pnorm(z)
pvalue < alpha
if(!pvalue < alpha){print("fail to reject Null hp")}else{print("Reject Null hp")}
#------------------------ MEAN z-test
mu0 = 98
sigma = 10
n = 100
x = 100
alpha = 0.05
z = (x-mu0)/(sigma/sqrt(n))
#------------------------ MEAN z-test
mu0 = 98
sigma = 10
n = 100
x = 100
alpha = 0.05
z = (x-mu0)/(sigma/sqrt(n))
#-- pvalue for Ha: mu > mu0
pvalue = 1-pnorm(z)
if(!pvalue < alpha){print("fail to reject Null hp")}else{print("Reject Null hp")}
n_samp_success <- 43
n_samp_obs <- 53
n_pop_success <- 66
n_pop_obs <- 100
alpha = 0.05
p_sample = (n_samp_success/n_samp_obs)
p_pop = (n_pop_success/n_pop_obs)
z = (p_sample-p_pop)/sqrt((p_pop*(1-p_pop))/n_samp_obs)
#-- pvalue for Ha: mu > mu0
pvalue = 1-pnorm(z)
if(!pvalue < alpha){print("fail to reject Null hp")}else{print("Reject Null hp")}
n_samp_success <- 44
n_samp_obs <- 53
n_pop_success <- 66
n_pop_obs <- 100
alpha = 0.05
p_sample = (n_samp_success/n_samp_obs)
p_pop = (n_pop_success/n_pop_obs)
z = (p_sample-p_pop)/sqrt((p_pop*(1-p_pop))/n_samp_obs)
#-- pvalue for Ha: mu > mu0
pvalue = 1-pnorm(z)
if(!pvalue < alpha){print("fail to reject Null hp")}else{print("Reject Null hp")}
#------------------------ PROPORTION z-test
n_samp_success <- 44
n_samp_obs <- 53
n_pop_success <- 67
n_pop_obs <- 100
alpha = 0.05
p_sample = (n_samp_success/n_samp_obs)
p_pop = (n_pop_success/n_pop_obs)
z = (p_sample-p_pop)/sqrt((p_pop*(1-p_pop))/n_samp_obs)
n_samp_success <- 44
n_samp_obs <- 51
n_pop_success <- 67
n_pop_obs <- 100
alpha = 0.05
p_sample = (n_samp_success/n_samp_obs)
p_pop = (n_pop_success/n_pop_obs)
z = (p_sample-p_pop)/sqrt((p_pop*(1-p_pop))/n_samp_obs)
#-- pvalue for Ha: mu > mu0
pvalue = 1-pnorm(z)
if(!pvalue < alpha){print("fail to reject Null hp")}else{print("Reject Null hp")}
n = 100
x = 100
mu0 = 98
sigma = 10
alpha = 0.05
z = (x-mu0)/(sigma/sqrt(n))
#-- pvalue for Ha: mu > mu0
pvalue = 1-pnorm(z)
if(!pvalue < alpha){print("fail to reject Null hp")}else{print("Reject Null hp")}
n_samp_success <- 44
n_samp_obs <- 51
n_pop_success <- 67
n_pop_obs <- 100
alpha = 0.05
p_sample = (n_samp_success/n_samp_obs)
p_pop = (n_pop_success/n_pop_obs)
z = (p_sample-p_pop)/sqrt((p_pop*(1-p_pop))/n_samp_obs)
#-- pvalue for Ha: mu > mu0
pvalue = 1-pnorm(z)
if(!pvalue < alpha){print("fail to reject Null hp")}else{print("Reject Null hp")}
#------------------------ MEAN t-test
mu0 = 14
n = 12
x = mean(c(19,14,23,20,15,19,21,16,18,18,16,21))
ss = sd(c(19,14,23,20,15,19,21,16,18,18,16,21))
alpha = 0.05
z = (x-mu0)/(ss/sqrt(n))
#-- pvalue for Ha: mu > mu0
pvalue = 1-pt(z, df = n-1)
pvalue < alpha
if(!pvalue < alpha){print("fail to reject Null hp")}else{print("Reject Null hp")}
n_samp_success <- 34
n_samp_obs <- 100
n_pop_success <- 50
n_pop_obs <- 100
alpha = 0.01
p_sample = (n_samp_success/n_samp_obs)
p_pop = (n_pop_success/n_pop_obs)
z = (p_sample-p_pop)/sqrt((p_pop*(1-p_pop))/n_samp_obs)
n_samp_success <- 34
n_samp_obs <- 100
n_pop_success <- 50
n_pop_obs <- 100
alpha = 0.01
p_sample = (n_samp_success/n_samp_obs)
p_pop = (n_pop_success/n_pop_obs)
z = (p_sample-p_pop)/sqrt((p_pop*(1-p_pop))/n_samp_obs)
#-- pvalue for Ha: mu != mu0
pvalue = 2*pnorm(z)
pvalue < alpha
if(!pvalue < alpha){print("fail to reject Null hp")}else{print("Reject Null hp")}
mu0 = 0
n = 5
x = mean(c(-4,-2,-4,-3,-4))
ss = sd(c(-4,-2,-4,-3,-4))
alpha = 0.05
z = (x-mu0)/(ss/sqrt(n))
#-- pvalue for Ha: mu < mu0
pvalue = pt(z, df = n-1)
pvalue < alpha
if(!pvalue < alpha){print("fail to reject Null hp")}else{print("Reject Null hp")}
mu0 = 0
n = 9
x = mean(c(14,11,7,11,-2,5,0,-1,-5))
ss = sd(c(14,11,7,11,-2,5,0,-1,-5))
alpha = 0.01
z = (x-mu0)/(ss/sqrt(n))
#------------------------ MEAN t-test
mu0 = 0
n = 9
x = mean(c(14,11,7,11,-2,5,0,-1,-5))
ss = sd(c(14,11,7,11,-2,5,0,-1,-5))
alpha = 0.1
z = (x-mu0)/(ss/sqrt(n))
#-- pvalue for Ha: mu > mu0
pvalue = 1-pt(z, df = n-1)
pvalue < alpha
if(!pvalue < alpha){print("fail to reject Null hp")}else{print("Reject Null hp")}
mu0 = 0
n = 5
x = mean(c(6,2,7,-3,5))
ss = sd(c(6,2,7,-3,5))
alpha = 0.05
z = (x-mu0)/(ss/sqrt(n))
#-- pvalue for Ha: mu < mu0
pvalue = pt(z, df = n-1)
pvalue < alpha
if(!pvalue < alpha){print("fail to reject Null hp")}else{print("Reject Null hp")}
#------------------------ MEAN t-test
mu0 = 0
n = 5
x = mean(c(6,2,7,-3,5))
ss = sd(c(6,2,7,-3,5))
alpha = 0.05
z = (x-mu0)/(ss/sqrt(n))
#------------------------ PROPORTION z-test
n_samp_success <- 44
n_samp_obs <- 100
n_pop_success <- 50
n_pop_obs <- 100
alpha = 0.01
p_sample = (n_samp_success/n_samp_obs)
p_pop = (n_pop_success/n_pop_obs)
z = (p_sample-p_pop)/sqrt((p_pop*(1-p_pop))/n_samp_obs)
#-- pvalue for Ha: mu != mu0
pvalue = 2*pnorm(z)
pvalue < alpha
if(!pvalue < alpha){print("fail to reject Null hp")}else{print("Reject Null hp")}
m1_samp = mean(c(26.1,26.5,26.5,25.8,26.7,26.2))
#m1_pop = 10
s1 = sd(c(26.1,26.5,26.5,25.8,26.7,26.2))
n1 = 6
m2_samp = mean(c(16.6,16.5,17.1,17.5,17.5,17.7,16.3))
#m2_pop = 10
s2 = sd(c(16.6,16.5,17.1,17.5,17.5,17.7,16.3))
n2 = 6
t = ((m1_samp-m2_samp)-(m1_pop-m2_pop)) / sqrt(((s1^2)/n1)+(s2^2)/n2))
t = ((m1_samp-m2_samp)-(m1_pop-m2_pop)) / sqrt((s1^2)/n1)+(s2^2)/n2))
t = ((m1_samp-m2_samp)-(m1_pop-m2_pop))/sqrt(((s1^2)/n1)+((s2^2)/n2))
mu0 = 0
n = 6
x = mean(c(26.1,26.5,26.5,25.8,26.7,26.2))
ss = sd(c(26.1,26.5,26.5,25.8,26.7,26.2))
z = (x-mu0)/(ss/sqrt(n))
mu0 = 0
n = 6
x = mean(c(9.5,10,9.4,8.3,9,9.9))
ss = sd(c(9.5,10,9.4,8.3,9,9.9))
alpha = 0.05
z = (x-mu0)/(ss/sqrt(n))
mu0 = 0
n = 6
x = mean(c(9.5,10,9.4,8.3,9,9.9))
ss = sd(c(9.5,10,9.4,8.3,9,9.9))
alpha = 0.05
z = (x-mu0)/(ss/sqrt(n))
mu0 = 0
n = 6
x = mean(c(-9.5,-10,-9.4,-8.3,-9,-9.9))
ss = sd(c(-9.5,-10,-9.4,-8.3,-9,-9.9))
alpha = 0.05
z = (x-mu0)/(ss/sqrt(n))
m1_samp = mean(c(26.1,26.5,26.5,25.8,26.7,26.2))
m1_pop = 0
s1 = sd(c(26.1,26.5,26.5,25.8,26.7,26.2))
n1 = 6
m2_samp = mean(c(16.6,16.5,17.1,17.5,17.5,17.7,16.3))
m2_pop = 0
s2 = sd(c(16.6,16.5,17.1,17.5,17.5,17.7,16.3))
n2 = 6
t = ((m1_samp-m2_samp)-(m1_pop-m2_pop))/sqrt(((s1^2)/n1)+((s2^2)/n2))
#------------------------ 2 props
p1_samp = 0.12
p1_pop = 10
n1 = 45
p2_samp = 0.14
p2_pop = 10
n2 = 75
alpha = 0.1
term1 = (p1_samp*(1-p1_samp))/n1
term2 = (p2_samp*(1-p2_samp))/n2
z = ((p1_samp-p2_samp)-(p1_pop-p2_pop)) / sqrt(term1+term2)
install.packages('e1071')
install.packages('e1071')
library("e1071", lib.loc="C:/Program Files/R/R-3.0.3/library")
data(iris)
attach(iris)
## classification mode
# default with factor response:
model <- svm(Species ~ ., data = iris)
# alternatively the traditional interface:
x <- subset(iris, select = -Species)
y <- Species
model <- svm(x, y)
print(model)
summary(model)
# test with train data
pred <- predict(model, x)
# (same as:)
pred <- fitted(model)
# Check accuracy:
table(pred, y)
# compute decision values and probabilities:
pred <- predict(model, x, decision.values = TRUE)
attr(pred, "decision.values")[1:4,]
# visualize (classes by color, SV by crosses):
plot(cmdscale(dist(iris[,-5])),
col = as.integer(iris[,5]),
pch = c("o","+")[1:150 %in% model$index + 1])
pred <- predict(model, x, decision.values = TRUE)
attr(pred)
pred
attr(pred, "decision.values")[1:4,]
# create data
x <- seq(0.1, 5, by = 0.05)
y <- log(x) + rnorm(x, sd = 0.2)
# estimate model and predict input values
m   <- svm(x, y)
new <- predict(m, x)
# visualize
plot(x, y)
points(x, log(x), col = 2)
points(x, new, col = 4)
summary(m)
## density-estimation
# create 2-dim. normal with rho=0:
X <- data.frame(a = rnorm(1000), b = rnorm(1000))
attach(X)
# traditional way:
m <- svm(X, gamma = 0.1)
# test:
newdata <- data.frame(a = c(0, 4), b = c(0, 4))
predict (m, newdata)
# visualize:
plot(X, col = 1:1000 %in% m$index + 1, xlim = c(-5,5), ylim=c(-5,5))
points(newdata, pch = "+", col = 2, cex = 5)
points(newdata, pch = "+", col = 2, cex = 1)
visualize:
> plot(X, col = 1:1000 %in% m$index + 1, xlim = c(-5,5), ylim=c(-5,5))
plot(X, col = 1:1000 %in% m$index + 1, xlim = c(-5,5), ylim=c(-5,5))
points(newdata, pch = "+", col = 2, cex = 1)
X <- data.frame(a = rnorm(1000), b = rnorm(1000))
attach(X)
View(X)
m <- svm(X, gamma = 0.1)
newdata <- data.frame(a = c(0, 4), b = c(0, 4))
View(newdata)
predict (m, newdata)
plot(X, col = 1:1000 %in% m$index + 1)
m$index
1:1000 %in% m$index + 1
1:1000
m$index + 1
m$index
1:1000 %in% m$index+1
# create 2-dim. normal with rho=0:
X <- data.frame(a = rnorm(1000), b = rnorm(1000))
attach(X)
# traditional way:
m <- svm(X, gamma = 0.1)
View(X)
View(newdata)
clear
clc
reset()
rm(list = ls(all = TRUE))
# create 2-dim. normal with rho=0:
X <- data.frame(a = rnorm(1000), b = rnorm(1000))
attach(X)
# traditional way:
m <- svm(X, gamma = 0.1)
newdata <- data.frame(a = c(0, 4), b = c(0, 4))
predict (m, newdata)
newdata <- data.frame(a = c(4, 4), b = c(4, 4))
predict (m, newdata)
newdaa
newdata
newdata <- data.frame(a = c(10, 4), b = c(10, 4))
predict (m, newdata)
newdata <- data.frame(a = c(0, 4), b = c(0, 4))
predict (m, newdata)
points(newdata, pch = "+", col = 4, cex = 2)
newdata <- data.frame(a = c(1, 4), b = c(1, 4))
predict (m, newdata)
points(newdata, pch = "+", col = 2, cex = 5)
newdata <- data.frame(a = c(0.9, 4), b = c(0.9, 4))
predict (m, newdata)
newdata <- data.frame(a = c(0.8, 4), b = c(0.8, 4))
predict (m, newdata)
points(newdata, pch = "+", col = 2, cex = 5)
plot(X, col = 1:1000 %in% m$index + 1, xlim = c(-5,5), ylim=c(-5,5))
points(newdata, pch = "+", col = 2, cex = 5)
1:1000 %in% m$index
m$index
rm(list = ls(all = TRUE))
# create 2-dim. normal with rho=0:
X <- data.frame(a = rnorm(1000), b = rnorm(1000))
attach(X)
# traditional way:
m <- svm(X, gamma = 0.1)
m$index
View(X)
plot(X, col = 1:1000 %in% m$index, xlim = c(-5,5), ylim=c(-5,5))
summary(m)
# weights: (example not particularly sensible)
i2 <- iris
levels(i2$Species)[3] <- "versicolor"
summary(i2$Species)
wts <- 100 / table(i2$Species)
wts
m <- svm(Species ~ ., data = i2, class.weights = wts)
sumary(m)
summary(m)
m$index
predict (m, i2)
table(predict (m, newdata))
table(predict (m, i2))
table(i2))
table(i2)
table(i2%Species)
table(i2$Species)
table(predict (m, i2))
predict (m, i2)
table(predict (m, i2),i2$Species)
?ts
x <- 1:1000
y <- runif(1000)
y
y <- ts(y)
plot(y)
fit <- stl(y, s.window="period")
x <- seq(-2*pi,2*pi,by 0.1)
x <- seq(-2*pi,2*pi,by = 0.1)
x
y <- sin(x)
plot(x,y)
fit <- stl(y, s.window="period")
x <- seq(-4*pi,4*pi,by = 0.1)
y <- sin(x)
fit <- stl(y, s.window="period")
y <- ts(y)
fit <- stl(y, s.window="period")
myts <- ts(sin(x), start=c(2009, 1), end=c(2014, 12), frequency=12)
plot(myts)
fit <- stl(myts, s.window="period")
fit
plot(fit)
fit <- auto.arima(myts)
library(forecast)
install.packages("forecast")
library(forecast)
fit <- auto.arima(myts)
plot(fit)
summary(fit)
acf(myts)
data <- read.csv("./ImdbRanking.txt", sep="\t", header = T)

read.csv("specdata/001.csv")
x <- list(a = 1:4 b = rnorm(10), c = rnorm(20,1), d = rnorm(100,5))
x <- list(a = 1:4, b = rnorm(10), c = rnorm(20,1), d = rnorm(100,5))
lapply(x , mean)
b <- lapply(x , mean)
x <- list(a = 1:4, b = rnorm(10), c = rnorm(20,1), d = rnorm(100,5))
listone <- lapply(x , mean)
listone$b
listone$a
lapply(1:4, runif)
x <- matrix(rnorm(200), 20 , 10)
x
apply(x, 2, mean)
apply(x, 1, mean)
dim(x)
apply(x, 1, quantile, probs = c(0.25, 0.75))
a <- array(rnorm(2*2*10), c(2,2,10))
a
dim(a)
apply(a, c(1,2), mean)
x <- seq(0, 2*pi, by=0.001)
y <- sin(x)
plot(x,y)
f <- fft(y)
f
plot(x,f)
library(datasets)
airquality
split(airquality,airquality$month)
s <- split(airquality, airquality$month)
s <- split(airquality, airquality$Month)
s
lapply(s, function(x) colMeans(x[,c("Ozone","Solar.R", "Wind")]))
sapply(s, function(x) colMeans(x[,c("Ozone","Solar.R", "Wind")]))
sapply(s, function(x) colMeans(x[,c("Ozone","Solar.R", "Wind")], na.rm=T))
x <- rnorm(10)
f1 <- gl(2,5)
f1
f2 <- gl(5,2)
f2
interaction(f1,f2)
f1
f2
?gl
interaction(f1,f2)
split(x, list(f1,f2))
str(split(x, list(f1,f2)))
x
x
str(split(x, list(f1,f2)), drop = T)
str(split(x, list(f1,f2), drop = T))
x
f1
f2
a <- samp(c("Male","Female"), 10)
a <- sample(c("Male","Female"), 10)
a <- rand(c("Male","Female"), 10)
?sample
a <- sample(c("Male","Female"), 10, replace= T)
a
b <- sample(c("Black","White"), 10, replace= T)
a
b
c <- c(a,b)
c
c <- cbind(a,b)
c
interaction(a,b)
aa <- rnorm(10)
aa
c <- cbind(c,aa)
c
data <- data.frame(c)
data
colnames(data) <- c("Sex","Race","Obs")
data
split(data$obs, list(data$Sex,data$Race))
split(aa, list(data$Sex,data$Race))
lapply(split(aa, list(data$Sex,data$Race)), mean)
data$obs
data$Obs
split(data$Obs, list(data$Sex,data$Race))
lapply(split(data$Obs, list(data$Sex,data$Race)), mean)
mapply(rep, 1:4, 4:1)
log(-1)
mean(x)
mean(x)
traceback
traceback()
mean(x)
traceback()
data(iris)
head(iris)
split(iris, iris$Species)
s <- split(iris, iris$Species)
s$virginica
a <- s$virginica
a
mean(a$Sepal.Length)
s <- split(iris, iris$Species)
s
lapply(s, mean)
s$virginiga
s$virginica
s$virginica$Sepal.Length
mean(s$virginica$Sepal.Length)
head(iris)
apply(iris[, 1:4], 1, mean)
apply(iris[, 1:4], 2, mean)
dim(iris)
data(mtcars)
head(mtcars)
tapply(mtcars$cyl, mtcars$mpg, mean)
apply(mtcars, 2, mean)
head(mtcars)
with(mtcars, tapply(mpg, cal, mean))
apply(mtcars, 2, mean)
split(mtcars,mtcars$cyl)
s <- split(mtcars,mtcars$cyl)
lapply(s, mean)
lapply(s$hp, mean)
s
s$cyl
mean(s$4)
s$4
s$4
s <- split(mtcars,mtcars$cyl)
s
s[1]
s[2]
s[3]
s[3]$cyl
s[3][,2]
s[3,2,]
s[3]
a <- s[3]
a
a$cyl
a
mtcars
s <- split(mtcars,mtcars$cyl)
s
s[1]
$`4`
s$`4`
s$`4`$cyl
mean(s$`4`$hp)-mean(s$`8`$hp)
abs(mean(s$`4`$hp)-mean(s$`8`$hp))
a = matrix(c(8,1,6,3,5,7,4,9,2), nrow=3)
a
solve(a)
myIverse <- makeCacheMatrix(a)
makeCacheMatrix <- function(x = matrix()) {
inverse <- NULL
set <- function(y) {
x <<- y
inverse <<- NULL
}
get <- function() x
setinverse <- function(solve) inverse <<- solve
getinverse <- function() inverse
list(set = set, get = get,
setinverse = setinverse,
getinverse = getinverse)
}
cacheSolve <- function(x, ...) {
inverse <- x$getinverse()
if(!is.null(inverse)) {
message("getting cached data")
return(inverse)
}
data <- x$get()
inverse <- solve(data, ...)
x$setinverse(inverse)
inverse
}
a = matrix(c(8,1,6,3,5,7,4,9,2), nrow=3)
myInverse <- makeCacheMatrix(a)
myInverse <- cacheSolve(a)
myInverse
a = matrix(c(8,1,6,3,5,7,4,9,2), nrow=3)
myInverse <- makeCacheMatrix(a)
myInverse
myInverse$getinverse
myInverse$getinverse(a)
myInverse <- makeCacheMatrix(a)
a = matrix(c(8,1,6,3,5,7,4,9,2), nrow=3)
myInverse <- makeCacheMatrix(a)
makeCacheMatrix <- function(x = matrix()) {
inverse <- NULL
set <- function(y) {
x <<- y
inverse <<- NULL
}
get <- function() x
setinverse <- function(solve) inverse <<- solve
getinverse <- function() inverse
list(set = set, get = get,
setinverse = setinverse,
getinverse = getinverse)
}
cacheSolve <- function(x, ...) {
inverse <- x$getinverse()
if(!is.null(inverse)) {
message("getting cached data")
return(inverse)
}
data <- x$get()
inverse <- solve(data, ...)
x$setinverse(inverse)
inverse
}
a = matrix(c(8,1,6,3,5,7,4,9,2), nrow=3)
myInverse <- makeCacheMatrix(a)
a = matrix(c(8,1,6,3,5,7,4,9,2), nrow=3)
myInverse <- makeCacheMatrix(a)
myInverse <- cacheSolve(a)
myInverse2 <- cacheSolve(myInverse)
myInverse2
myInverse2 <- cacheSolve(myInverse)
myInverse2
myInverse2
a = matrix(c(8,1,6,3,5,7,4,9,2), nrow=3)
myInverse <- makeCacheMatrix(a)
myInverse <- cacheSolve(myInverse)
myInverse <- cacheSolve(myInverse)
myInverse2 <- cacheSolve(myInverse)
makeCacheMatrix <- function(x = matrix()) {
inverse <- NULL
set <- function(y) {
x <<- y
inverse <<- NULL
}
get <- function() x
setinverse <- function(solve) inverse <<- solve
getinverse <- function() inverse
list(set = set, get = get,
setinverse = setinverse,
getinverse = getinverse)
}
cacheSolve <- function(x, ...) {
inverse <- x$getinverse()
if(!is.null(inverse)) {
message("getting cached data")
return(inverse)
}
data <- x$get()
inverse <- solve(data, ...)
x$setinverse(inverse)
inverse
}
a = matrix(c(8,1,6,3,5,7,4,9,2), nrow=3)
cachedMatrix <- makeCacheMatrix(a)
myInverse <- cacheSolve(cachedMatrix)
myInverse
myInverse2 <- cacheSolve(cachedMatrix)
myInverse2
myInverse <- cacheSolve(cachedMatrix)
myInverse2 <- cacheSolve(cachedMatrix)
myInverse <- cacheSolve(cachedMatrix)
myInverse2 <- cacheSolve(cachedMatrix)
setwd("C:/course-R/Week4")
sbmit()
submit()
rankall <- function(outcome, num = "best") {
## Read outcome data
data <- data.frame(read.csv("outcome-of-care-measures.csv", colClasses = "character", na.strings = "Not Available"))
valid_outcomes <- c("heart attack","heart failure","pneumonia")
index <- c(11,17,23)
if(sum(valid_outcomes == outcome) == 0){
stop("invalid outcome")
}
states <- unique(data$State)
states <- states[order(states)]
tmp <- rep("",length(states))
for (i in seq_along(states)){
state <- states[i]
## Return hospital name in that state with the given rank
## 30-day death rate
col <- index[which(valid_outcomes == outcome)]
## Return hospital name in that state with lowest 30-day death rate
subset <- data[data$State == state,c(2,col)]
subset[,2] <- as.numeric(subset[,2])
subset <- subset[complete.cases(subset),]
subset <- subset[order(subset[,1]),]
subset <- cbind(subset, rank(subset[,2], ties.method = "first"))
if(num == "best"){
res <- subset[subset[,3] == min(subset[,3]),1]
}
else if(num == "worst"){
res <- subset[subset[,3] == max(subset[,3]),1]
}
else if(num > max(subset[,3])){
res <- NA
}
else {
res <- subset[subset[,3] == num,1]
}
tmp[i] <- res
}
result <- data.frame(cbind(tmp,states))
names(result) <- c("hospital","state")
result
}
a <- rankall("pneumonia", "worst")
tail(a,10)
source("http://d396qusza40orc.cloudfront.net/rprog%2Fscripts%2Fsubmitscript3.R")
submit()
